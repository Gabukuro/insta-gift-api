version: 2
jobs:
  build:
    docker:
      - image: cimg/go:1.20.7
        environment:
          GO111MODULE: "on"
          GOPATH: /home/circleci/go
          DATABASE_URL: postgres://postgres@localhost:5432/circle_test?sslmode=disable
      - image: circleci/postgres:10-alpine-ram
      - image: cimg/redis:6.2.6
    working_directory: /home/circleci/go/src/github.com/transfeera/application
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: make install-ci
      - run: >-
          which go-junit-report > /dev/null || go install
          github.com/jstemmer/go-junit-report@latest
      - run: >-
          which sql-migrate > /dev/null || go install
          github.com/rubenv/sql-migrate/...@latest
      - run:
          name: Run linters
          command: make lint
      - run: mkdir -p "$TEST_RESULTS"
      - run:
          name: Run unit tests
          command: >
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > 
            ${TEST_RESULTS}/go-test-report.xml" EXIT

            make test | tee ${TEST_RESULTS}/go-test.out && cp coverage.out 
            ${TEST_RESULTS}/coverage.out
      - run: make build-prod
      - persist_to_workspace:
          root: /tmp/test-results
          paths:
            - go-test-report.xml
            - go-test.out
            - coverage.out
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results
  build_docker:
    machine: true
    steps:
      - checkout
      - run:
          name: "Login to Docker"
          command: >- 
            aws ecr get-login-password --region us-east-1 | docker login 
            --username AWS --password-stdin 
            $AWS_DOCKER_REPO_ID.dkr.ecr.us-east-1.amazonaws.com
      - run:
          name: "Push Image"
          command: >
            docker tag $CIRCLE_PROJECT_REPONAME:latest 
            $AWS_DOCKER_REPO_ID.dkr.ecr.us-east-1.amazonaws.com/$CIRCLE_PROJECT_REPONAME:latest
workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - main
                - homolog
  deploy_prod:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - build_docker:
          context: AWS_EB_PROD
          requires:
            - build
          filters:
            branches:
              only: main
